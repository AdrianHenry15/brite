/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: "sanity.imagePaletteSwatch";
    background?: string;
    foreground?: string;
    population?: number;
    title?: string;
};

export type SanityImagePalette = {
    _type: "sanity.imagePalette";
    darkMuted?: SanityImagePaletteSwatch;
    lightVibrant?: SanityImagePaletteSwatch;
    darkVibrant?: SanityImagePaletteSwatch;
    vibrant?: SanityImagePaletteSwatch;
    dominant?: SanityImagePaletteSwatch;
    lightMuted?: SanityImagePaletteSwatch;
    muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
    _type: "sanity.imageDimensions";
    height?: number;
    width?: number;
    aspectRatio?: number;
};

export type SanityImageHotspot = {
    _type: "sanity.imageHotspot";
    x?: number;
    y?: number;
    height?: number;
    width?: number;
};

export type SanityImageCrop = {
    _type: "sanity.imageCrop";
    top?: number;
    bottom?: number;
    left?: number;
    right?: number;
};

export type SanityFileAsset = {
    _id: string;
    _type: "sanity.fileAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
    _id: string;
    _type: "sanity.imageAsset";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    originalFilename?: string;
    label?: string;
    title?: string;
    description?: string;
    altText?: string;
    sha1hash?: string;
    extension?: string;
    mimeType?: string;
    size?: number;
    assetId?: string;
    uploadId?: string;
    path?: string;
    url?: string;
    metadata?: SanityImageMetadata;
    source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
    _type: "sanity.imageMetadata";
    location?: Geopoint;
    dimensions?: SanityImageDimensions;
    palette?: SanityImagePalette;
    lqip?: string;
    blurHash?: string;
    hasAlpha?: boolean;
    isOpaque?: boolean;
};

export type Geopoint = {
    _type: "geopoint";
    lat?: number;
    lng?: number;
    alt?: number;
};

export type SanityAssetSourceData = {
    _type: "sanity.assetSourceData";
    name?: string;
    id?: string;
    url?: string;
};

export type Application = {
    _id: string;
    _type: "application";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    job?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "job";
    };
    slug?: Slug;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    publishedAt?: string;
};

export type Testimonial = {
    _id: string;
    _type: "testimonial";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    role?: string;
    testimonial?: string;
    publishedAt?: string;
};

export type Job = {
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
};

export type Slug = {
    _type: "slug";
    current?: string;
    source?: string;
};

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityImageHotspot
    | SanityImageCrop
    | SanityFileAsset
    | SanityImageAsset
    | SanityImageMetadata
    | Geopoint
    | SanityAssetSourceData
    | Application
    | Testimonial
    | Job
    | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/applications/getAllApplications.ts
// Variable: ALL_APPLICATIONS_QUERY
// Query: *[_type == "application"] | order(name asc)
export type ALL_APPLICATIONS_QUERYResult = Array<{
    _id: string;
    _type: "application";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    job?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "job";
    };
    slug?: Slug;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    publishedAt?: string;
}>;

// Source: ./sanity/lib/applications/getApplicationBySlug.ts
// Variable: APPLICATION_BY_ID_QUERY
// Query: *[_type == "application" && slug.current == $slug] | order(name asc) [0]
export type APPLICATION_BY_ID_QUERYResult = {
    _id: string;
    _type: "application";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    job?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "job";
    };
    slug?: Slug;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    publishedAt?: string;
} | null;

// Source: ./sanity/lib/job-openings/getAllJobOpenings.ts
// Variable: ALL_JOB_OPENINGS_QUERY
// Query: *[_type == "job"] | order(name asc)
export type ALL_JOB_OPENINGS_QUERYResult = Array<{
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
}>;

// Source: ./sanity/lib/job-openings/getJobOpeningBySlug.ts
// Variable: JOB_BY_ID_QUERY
// Query: *[_type == "job" && slug.current == $slug] | order(name asc) [0]
export type JOB_BY_ID_QUERYResult = {
    _id: string;
    _type: "job";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    slug?: Slug;
    location?: string;
    description?: string;
    publishedAt?: string;
} | null;

// Source: ./sanity/lib/testimonials/getAllTestimonials.ts
// Variable: ALL_TESTIMONIALS_QUERY
// Query: *[_type == "testimonial"] | order(name asc)
export type ALL_TESTIMONIALS_QUERYResult = Array<{
    _id: string;
    _type: "testimonial";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    slug?: Slug;
    role?: string;
    testimonial?: string;
    publishedAt?: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
    interface SanityQueries {
        '*[_type == "application"] | order(name asc)\n': ALL_APPLICATIONS_QUERYResult;
        '*[_type == "application" && slug.current == $slug] | order(name asc) [0]\n': APPLICATION_BY_ID_QUERYResult;
        '*[_type == "job"] | order(name asc)\n': ALL_JOB_OPENINGS_QUERYResult;
        '*[_type == "job" && slug.current == $slug] | order(name asc) [0]\n': JOB_BY_ID_QUERYResult;
        '*[_type == "testimonial"] | order(name asc)\n': ALL_TESTIMONIALS_QUERYResult;
    }
}
